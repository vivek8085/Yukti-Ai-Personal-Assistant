#run this
import streamlit as st
import speech_recognition as sr
from gtts import gTTS
import os
import tempfile
import datetime
import wikipedia
import webbrowser
import smtplib
import time
import base64
import webbrowser
import csv
from facial_emotion_recognition import EmotionRecognition
import cv2
import time


st.markdown(
    """
    <style>
    [data-testid="stSidebar"] {
        # background: white;
        color: smoke;
        animation: pulse 3s infinite;
        padding: 20px;
    }
    @keyframes pulse {
        0% { background-color: rgba(0, 128, 255, 0.9); color:green;}
        50% { background-color: rgba(0, 212, 255, 1); color:blue;}
        100% { background-color: rgba(0, 128, 255, 0.9); }
    }
    .emoji {
        font-size: 3.5rem;
        margin-right: 10px;
        animation: bounce 1.5s infinite;
    }
    @keyframes bounce {
        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
        40% { transform: translateY(-10px); }
        60% { transform: translateY(-5px); }
    }
    </style>
    """,
    unsafe_allow_html=True
)

st.markdown(
    """
    <style>
    [data-testid="stAppViewContainer"] {
        background: linear-gradient(120deg, #1e3c72, #2a5298, #0f2027);
        background-size: 400% 400%;
        animation: gradientShift 10s ease infinite;
        height: 100vh;
        padding: 0;
        margin: 0;
    }
    @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
    @media (max-width: 768px) {
        [data-testid="stAppViewContainer"] {
            background: linear-gradient(120deg, #6a11cb, #2575fc);
        }
    }
    </style>
    """,
    unsafe_allow_html=True
)


#########################################################################################################################
st.sidebar.markdown('<div class="yellow-subheader">Features</div>', unsafe_allow_html=True)
st.sidebar.markdown("""
- üè† **Home**: Chat with Yukti.  
- üò†üòÆüòê **Emotion Recognition**: To Enable Emotion Recognition mode.  
""")
# Main page content
# st.title("Yukti -An AI Assistant ü§ñ")

# Choose language: 'en' for English, 'kn' for Kannada, 'hi' for Hindi
st.markdown(
        """
        <style>
        .marquee {
            text-align: center;
            font-size: 1.2rem;
            font-weight: bold;
            color: #ff0000;
            padding: 10px;
            border-radius: 5px;
            animation: scroll 10s linear infinite;
            # animation: glow 1.5s infinite;
        }

        @keyframes scroll {
            0% { transform: translateX(100%); }
            100% { transform: translateX(-100%); }
        }
        </style>
        <div class="marquee">
            To Communicate with it,Choose any one language.. 
        </div>
        """,
        unsafe_allow_html=True
        )
language = st.selectbox("Select Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / ‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:", ["English", "Hindi", "Kannada"])

if language == "Kannada":
    lang_code = 'kn'
elif language == "Hindi":
    lang_code = 'hi'
else:
    lang_code = 'en'

# Function to convert text to speech
def speak(text):
    tts = gTTS(text=text, lang=lang_code)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
        tts.save(fp.name)
        with open(fp.name, "rb") as audio_file:
            audio_bytes = audio_file.read()
    
    audio_base64 = base64.b64encode(audio_bytes).decode()
    audio_tag = f'<audio autoplay="true" src="data:audio/mp3;base64,{audio_base64}">'
    st.markdown(audio_tag, unsafe_allow_html=True)
    os.unlink(fp.name)

st.markdown(
    """
    <style>
    .yel-col{
        color:yellow;
        font-weight: bold;
        font-size: 1.0rem;
        # animation: glow 1.5s infinite;
        align-content: center;
    }
    
    .pink-subheader {
        color: pink;
        font-weight: bold;
        font-size: 1.5rem;
        animation: glow 1.5s infinite;
        align-content: center;
    }
    .yellow-subheader {
        color: yellow;
        font-weight: bold;
        font-size: 1.5rem;
        animation: glow 1.5s infinite;
    }

    @keyframes glow {
        0% {
            text-shadow: 0 0 5px #ffd700, 0 0 10px #ffd700, 0 0 15px #ffd700;
        }
        50% {
            text-shadow: 0 0 10px #ffd700, 0 0 20px #ffd700, 0 0 30px #ffd700;
        }
        100% {
            text-shadow: 0 0 5px #ffd700, 0 0 10px #ffd700, 0 0 15px #ffd700;
        }
    }
    </style>
    """,
    unsafe_allow_html=True
)



# st.markdown(
#     """
#     <style>
#     [data-testid="stMain"]{
#         background: rgb(2,0,36);
# background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(9,98,121,0.8352591036414566) 35%, rgba(0,212,255,1) 100%);
#     }
#     </style>
#     """,
#     unsafe_allow_html=True
# )

# Function to recognize speech
def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        st.write("Listening..." if lang_code == 'en' else "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å..." if lang_code == 'hi' else "‡≤ï‡≥Ü‡≤≥‡≤ó‡≤ø‡≤∞‡≥Å‡≤µ...")
        audio = r.listen(source, timeout=10, phrase_time_limit=10)
    try:
        st.write("Recognizing..." if lang_code == 'en' else "‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å..." if lang_code == 'hi' else "‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...")
        query = r.recognize_google(audio, language='en-IN' if lang_code == 'en' else 'hi-IN' if lang_code == 'hi' else 'kn-IN')
        st.write(f"User said: {query}" if lang_code == 'en' else f"‡§Ø‡•Ç‡§ú‡§∞ ‡§®‡•á ‡§ï‡§π‡§æ: {query}" if lang_code == 'hi' else f"‡≤¨‡≤≥‡≤ï‡≥Ü‡≤¶‡≤æ‡≤∞‡≤∞‡≥Å ‡≤π‡≥á‡≤≥‡≤ø‡≤¶‡≤∞‡≥Å: {query}")
        return query.lower()
    except sr.WaitTimeoutError:
        return "Timeout" if lang_code == 'en' else "‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§" if lang_code == 'hi' else "‡≤ü‡≥à‡≤Æ‡≥å‡≤ü‡≥ç"
    except sr.UnknownValueError:
        return "Unknown" if lang_code == 'en' else "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§" if lang_code == 'hi' else "‡≤Ö‡≤ú‡≥ç‡≤û‡≤æ‡≤§"
    except Exception as e:
        st.write(f"An error occurred: {str(e)}" if lang_code == 'en' else f"‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à: {str(e)}" if lang_code == 'hi' else f"‡≤¶‡≥ã‡≤∑‡≤µ‡≥ä‡≤Ç‡≤¶‡≥Å ‡≤â‡≤Ç‡≤ü‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü: {str(e)}")
        return "Error" if lang_code == 'en' else "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø" if lang_code == 'hi' else "‡≤¶‡≥ã‡≤∑"

def wishMe():
    hour = datetime.datetime.now().hour
    if 0 <= hour < 12:
        return "Good Morning!" if lang_code == 'en' else "‡§∏‡•Å‡§™‡•ç‡§∞‡§≠‡§æ‡§§!" if lang_code == 'hi' else "‡≤∂‡≥Å‡≤≠‡≥ã‡≤¶‡≤Ø!"
    elif 12 <= hour < 18:
        return "Good Afternoon!" if lang_code == 'en' else "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞!" if lang_code == 'hi' else "‡≤∂‡≥Å‡≤≠ ‡≤Æ‡≤ß‡≥ç‡≤Ø‡≤æ‡≤π‡≥ç‡≤®!"
    else:
        return "Good Evening!" if lang_code == 'en' else "‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ!" if lang_code == 'hi' else "‡≤∂‡≥Å‡≤≠ ‡≤∏‡≤Ç‡≤ú‡≥Ü!"

def search_google(query):
    search_url = f"https://www.google.com/search?q={query}"
    webbrowser.open(search_url)

def sendEmail(to, content):
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    server.login('email@gmail.com', 'API-Key')
    server.sendmail('email@gmail.com', to, content)
    server.close()

timestamp = datetime.datetime.now().strftime(f"%Y-%m-%d %H:%M:%S")
st.markdown('<div class="yellow-subheader">AI Assistant</div>', unsafe_allow_html=True)
# st.title("Yukti ü§ñ" if lang_code == 'en' else "‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø ü§ñ" if lang_code == 'hi' else "‡≤Ø‡≥Å‡≤ï‡≥ç‡≤§‡≤ø ü§ñ")
st.markdown(
    """
    <style>
    .yukti-title {
        font-size: 3rem;
        font-weight: bold;
        text-align: left;
        color: yellow;
        animation: yukti-glow 2s infinite;
    }

    @keyframes yukti-glow {
        0% {
            text-shadow: 0 0 10px yellow, 0 0 20px yellow, 0 0 30px green;
        }
        50% {
            text-shadow: 0 0 20px green, 0 0 30px yellow, 0 0 40px green;
        }
        100% {
            text-shadow: 0 0 10px green, 0 0 20px green, 0 0 30px yellow;
        }
    }
    </style>
    <div class="yukti-title">
        Yukti ü§ñ
    </div>
    """,
    unsafe_allow_html=True
)

st.image("bot.gif")

def main():
    if not os.path.exists('chat_log.csv'):
        with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
            csv_writer = csv.writer(csvfile)
            csv_writer.writerow(['User Input', 'Response', 'Timestamp'])


    greeting = wishMe()
    speak(f"{greeting} Hello! How can I make your day better ?" if lang_code == 'en' else 
          f"{greeting} ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å?" if lang_code == 'hi' else 
          f"{greeting} ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥á?")
    
    # wishMe()
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        # greeting = wishMe()
        # speak(f"{greeting} Hello! How can I make your day better ?" if lang_code == 'en' else 
            #   f"{greeting} ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?" if lang_code == 'hi' else 
            #   f"{greeting} ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥á?")

    if 'listening' not in st.session_state:
        st.session_state.listening = False

    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("Start Listening" if lang_code == 'en' else "‡§∏‡•Å‡§®‡§®‡§æ ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡•á‡§Ç" if lang_code == 'hi' else "‡≤∂‡≥ç‡≤∞‡≤µ‡≤£ ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø"):
            if 'greeted' not in st.session_state:
                st.session_state.greeted = True
            #     greeting = wishMe()
            #     speak(f"{greeting} Hello! How can I make your day better?" if lang_code == 'en' else 
            #           f"{greeting} ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å?" if lang_code == 'hi' else 
            #           f"{greeting} ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥á?")
            st.session_state.listening = True
            st.rerun()
    
    with col2:
        if st.button("Stop Listening" if lang_code == 'en' else "‡§∏‡•Å‡§®‡§®‡§æ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç" if lang_code == 'hi' else "‡≤∂‡≥ç‡≤∞‡≤µ‡≤£ ‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø"):
            st.session_state.listening = False
            st.rerun()

    output = st.empty()

    if st.session_state.listening:
        output.write("Listening... Say something!" if lang_code == 'en' else 
                     "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å... ‡§ï‡•Å‡§õ ‡§ï‡§π‡•á‡§Ç!" if lang_code == 'hi' else 
                     "‡≤ï‡≥Ü‡≤≥‡≤ó‡≤ø‡≤∞‡≥Å‡≤µ... ‡≤è‡≤®‡≤æ‡≤¶‡≤∞‡≥Ç ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤ø!")
        query = takeCommand()
        
        if query not in ["Timeout", "Unknown", "Error", "‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§", "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§", "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", "‡≤ü‡≥à‡≤Æ‡≥å‡≤ü‡≥ç", "‡≤Ö‡≤ú‡≥ç‡≤û‡≤æ‡≤§", "‡≤¶‡≥ã‡≤∑"]:
            output.write(f"Processing: {query}" if lang_code == 'en' else 
                         f"‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£: {query}" if lang_code == 'hi' else 
                         f"‡≤∏‡≤Ç‡≤∏‡≥ç‡≤ï‡≤∞‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü: {query}")
            
            if 'wikipedia' in query or '‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ' in query or '‡≤µ‡≤ø‡≤ï‡≤ø‡≤™‡≥Ä‡≤°‡≤ø‡≤Ø' in query:
                speak('Searching Wikipedia...' if lang_code == 'en' else 
                      '‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§ñ‡•ã‡§ú ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...' if lang_code == 'hi' else 
                      '‡≤µ‡≤ø‡≤ï‡≤ø‡≤™‡≥Ä‡≤°‡≤ø‡≤Ø‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü...')
                query = query.replace("wikipedia", "").replace("‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ", "").replace("‡≤µ‡≤ø‡≤ï‡≤ø‡≤™‡≥Ä‡≤°‡≤ø‡≤Ø", "")
                results = wikipedia.summary(query, sentences=1)
                res=("According to Wikipedia" if lang_code == 'en' else 
                      "‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞" if lang_code == 'hi' else 
                      "‡≤µ‡≤ø‡≤ï‡≤ø‡≤™‡≥Ä‡≤°‡≤ø‡≤Ø ‡≤™‡≥ç‡≤∞‡≤ï‡≤æ‡≤∞")
                output.write(results)
                speak(results)
                with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
                    csv_writer = csv.writer(csvfile)
                    csv_writer.writerow([query, res,timestamp])

            elif 'open youtube' in query or '‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§ñ‡•ã‡§≤‡•á‡§Ç' in query or '‡≤Ø‡≥Å‡≤ü‡≥ç‡≤Ø‡≥Ç‡≤¨‡≥ç ‡≤§‡≥Ü‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø' in query:
                webbrowser.open("https://www.youtube.com/")
                res=("Opening YouTube" if lang_code == 'en' else 
                      "‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§ñ‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å" if lang_code == 'hi' else 
                      "‡≤Ø‡≥Ç‡≤ü‡≥ç‡≤Ø‡≥Ç‡≤¨‡≥ç ‡≤§‡≥Ü‡≤∞‡≥Ü‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü")
                speak(res)
                with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
                    csv_writer = csv.writer(csvfile)
                    csv_writer.writerow([query, res,timestamp])

            elif 'open google' in query or '‡§ó‡•Ç‡§ó‡§≤ ‡§ñ‡•ã‡§≤‡•á‡§Ç' in query or '‡≤ó‡≥Ç‡≤ó‡≤≤‡≥ç ‡≤§‡≥Ü‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø' in query:
                webbrowser.open("https://google.com")
                res=("Opening Google" if lang_code == 'en' else 
                      "‡§ó‡•Ç‡§ó‡§≤ ‡§ñ‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å" if lang_code == 'hi' else 
                      "‡≤ó‡≥Ç‡≤ó‡≤≤‡≥ç ‡≤§‡≥Ü‡≤∞‡≥Ü‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü")
                speak(res)
                with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
                    csv_writer = csv.writer(csvfile)
                    csv_writer.writerow([query, res,timestamp])


            elif 'time' in query or '‡§∏‡§Æ‡§Ø' in query or '‡≤∏‡≤Æ‡≤Ø' in query:
                strTime = datetime.datetime.now().strftime("%H:%M:%S")
                res=(f"The time is {strTime}" if lang_code == 'en' else 
                      f"‡§∏‡§Æ‡§Ø ‡§π‡•à {strTime}" if lang_code == 'hi' else 
                      f"‡≤à‡≤ó ‡≤∏‡≤Æ‡≤Ø {strTime}")
                speak(res)
                with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
                    csv_writer = csv.writer(csvfile)
                    csv_writer.writerow([query, res,timestamp])


            elif 'search' in query or 'google' in query or '‡§ñ‡•ã‡§ú‡•á‡§Ç' in query or '‡§ó‡•Ç‡§ó‡§≤' in query or '‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≥Å' in query or '‡≤ó‡≥Ç‡≤ó‡≤≤‡≥ç' in query:
                search_query = query.replace("search", "").replace("google", "").replace("‡§ñ‡•ã‡§ú‡•á‡§Ç", "").replace("‡§ó‡•Ç‡§ó‡§≤", "").replace("‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≥Å", "").replace("‡≤ó‡≥Ç‡≤ó‡≤≤‡≥ç", "").strip()
                res=(f"Searching Google for {search_query}" if lang_code == 'en' else 
                      f"‡§ó‡•Ç‡§ó‡§≤ ‡§™‡§∞ {search_query} ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å" if lang_code == 'hi' else 
                      f"‡≤ó‡≥Ç‡≤ó‡≤≤‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø {search_query} ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü")
                search_google(search_query)
                output.write(f"Searched Google for: {search_query}" if lang_code == 'en' else 
                             f"‡§ó‡•Ç‡§ó‡§≤ ‡§™‡§∞ ‡§ñ‡•ã‡§ú‡§æ ‡§ó‡§Ø‡§æ: {search_query}" if lang_code == 'hi' else 
                             f"‡≤ó‡≥Ç‡≤ó‡≤≤‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤ø‡≤¶‡≥Ü: {search_query}")
                speak(res)
                with open('chat_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
                    csv_writer = csv.writer(csvfile)
                    csv_writer.writerow([query, res,timestamp])


            elif 'sleep' in query or 'quit' in query or '‡§∏‡•ã ‡§ú‡§æ‡§ì' in query or '‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã' in query or '‡≤®‡≤ø‡≤¶‡≥ç‡≤∞‡≥Ü' in query or '‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø' in query:
                speak('Thank you so much! I‚Äôll be right here when you need me again.' if lang_code == 'en' else 
                      '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§´‡§ø‡§∞ ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á‡•§' if lang_code == 'hi' else 
                      '‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶‡≤ó‡≤≥‡≥Å! ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤ï‡≤æ‡≤£‡≥ã‡≤£.')
                st.session_state.listening = False


            elif 'send' or 'Email' or '‡≤á‡≤Æ‡≥á‡≤≤‡≥ç ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤ø' or '‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂' or '‡§à‡§Æ‡•á‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç' or '‡§à‡§Æ‡•á‡§≤' in query:
                try:
                    speak("What to send?" if lang_code == 'en' else 
                  "‡§ï‡•ç‡§Ø‡§æ ‡§≠‡•á‡§ú‡§®‡§æ ‡§π‡•à?" if lang_code == 'hi' else "‡≤è‡≤®‡≥Å ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤¨‡≥á‡≤ï‡≥Å?")
                    content = takeCommand()
                    to = "email@gmail.com"    
                    # speak("To whom?")
                    sendEmail(to, content)
                    speak("Email has been sent!" if lang_code == 'en' else 
                  "‡§à‡§Æ‡•á‡§≤ ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à" if lang_code == 'hi' else "‡≤á‡≤Æ‡≥á‡≤≤‡≥ç ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü")
                except Exception as e:
                    speak("The api not genereted!" if lang_code == 'en' else 
                  "‡§ï‡•ç‡§∑‡§Æ‡§æ‡•§ ‡§Æ‡•à‡§Ç ‡§Ø‡§π ‡§à‡§Æ‡•á‡§≤ ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Ç‡§Ç" if lang_code == 'hi' else "‡≤¶‡≥ã‡≤∑‡≤µ‡≥ä‡≤Ç‡≤¶‡≥Å ‡≤â‡≤Ç‡≤ü‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø")

            else:
                speak("I'm really sorry, I didn't catch that. Would you mind trying again, please?" if lang_code == 'en' else 
                      "‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§" if lang_code == 'hi' else 
                      "‡≤®‡≤æ‡≤®‡≥Å ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥ä‡≤Æ‡≥ç‡≤Æ‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.")

        elif query == "Timeout" or query == "‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§" or query == "‡≤ü‡≥à‡≤Æ‡≥å‡≤ü‡≥ç":
            speak("I didn‚Äôt catch anything, sweetie. Could you please try again?" if lang_code == 'en' else 
                  "‡§ï‡•ã‡§à ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§" if lang_code == 'hi' else 
                  "‡≤è‡≤®‡≥Ç ‡≤ï‡≥á‡≤≥‡≤≤‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.")
        elif query == "Unknown" or query == "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§" or query == "‡≤Ö‡≤ú‡≥ç‡≤û‡≤æ‡≤§":
            speak("I couldn‚Äôt quite understand that, Can you please repeat it?" if lang_code == 'en' else 
                  "‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§" if lang_code == 'hi' else 
                  "‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.")
        else:
            speak("Oh no! Something went wrong. Let me know how I can be of help." if lang_code == 'en' else 
                  "‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§" if lang_code == 'hi' else 
                  "‡≤¶‡≥ã‡≤∑‡≤µ‡≥ä‡≤Ç‡≤¶‡≥Å ‡≤â‡≤Ç‡≤ü‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.")

        time.sleep(2.5)
        st.rerun()

def nav():
    menu = ["Home","Emotion Recognition mode"]
    choice = st.sidebar.selectbox("Menu", menu)
    if choice=="Emotion Recognition mode":
        device = 'cuda' if cv2.cuda.getCudaEnabledDeviceCount() > 0 else 'cpu'
        er = EmotionRecognition(device=device)
        cam = cv2.VideoCapture(0, cv2.CAP_DSHOW)  # CAP_DSHOW to reduce latency on Windows

        if not cam.isOpened():
            print("Error: Cannot access the camera.")
            exit()

        # Set optimal frame size
        frame_width, frame_height = 640, 480
        cam.set(cv2.CAP_PROP_FRAME_WIDTH, frame_width)
        cam.set(cv2.CAP_PROP_FRAME_HEIGHT, frame_height)

        frame_counter = 0
        fps = 0

        while True:
            start_time = time.time()
            success, frame = cam.read()
            if not success:
                print("Failed to capture frame.")
                break
            
            # Preprocess frame: Grayscale conversion for consistency
            gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            gray_frame = cv2.cvtColor(gray_frame, cv2.COLOR_GRAY2BGR)  # Convert back to 3-channel for emotion recognition

            # Process every 3rd frame to improve performance if needed
            if frame_counter % 3 == 0:
                frame = er.recognise_emotion(gray_frame, return_type='BGR')

            frame_counter += 1
            # Calculate and display FPS
            elapsed_time = time.time() - start_time
            fps = 1.0 / elapsed_time if elapsed_time > 0 else 0
            cv2.putText(frame, f"FPS: {int(fps)}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)


            # Display the frame
            cv2.imshow("Emotion Recognition", frame)

            # Press 'Esc' to exit
            key = cv2.waitKey(1) & 0xFF
            if key == 27:
                break
            
        # Release resources
        cam.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    nav()
    main()
